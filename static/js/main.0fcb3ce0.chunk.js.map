{"version":3,"sources":["axios.js","Row.js","request.js","Banner.js","Navbar.js","App.js","serviceWorker.js","index.js"],"names":["instance","axios","create","baseURL","movieTrailer","require","Row","title","fetchUrl","isLarge","useState","movies","setMovies","trailerUrl","setTrailerUrl","useEffect","a","get","request","data","results","fetchData","className","map","movie","key","id","onClick","name","then","url","urlParam","URLSearchParams","URL","search","catch","err","console","log","handleClick","src","poster_path","backdrop_path","alt","videoId","opts","heigth","width","playerVars","autoplay","API_KEY","requests","fetchTrending","fetchNetflixOriginals","fetchTopRated","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","fetchDocumentaries","Banner","str","n","setMovie","Math","floor","random","length","style","backgroundImage","backgroundPosition","original_name","overview","substr","Navbar","show","handleShow","window","addEventListener","scrollY","removeEventListener","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.0fcb3ce0.chunk.js","sourcesContent":["import axios from \"axios\";\n\nconst instance = axios.create({\n  baseURL: \"https://api.themoviedb.org/3\",\n});\n\nexport default instance;\n","import React, { useState, useEffect } from \"react\";\nimport instance from \"./axios\";\nimport \"./Row.css\";\nimport Youtube from \"react-youtube\";\n// import movieTrailer from \"movie-trailer\";\nconst movieTrailer = require(\"movie-trailer\");\n\nconst base_url = \"https://image.tmdb.org/t/p/original/\";\n\nfunction Row({ title, fetchUrl, isLarge }) {\n  const [movies, setMovies] = useState([]);\n  const [trailerUrl, setTrailerUrl] = useState(\"\");\n\n  useEffect(() => {\n    async function fetchData() {\n      const request = await instance.get(fetchUrl);\n      setMovies(request.data.results);\n      return request;\n    }\n    fetchData();\n  }, [fetchUrl]);\n\n  // console.table(movies);\n\n  const opts = {\n    heigth: \"390\",\n    width: \"100%\",\n    playerVars: {\n      //,\n      autoplay: 1,\n    },\n  };\n\n  const handleClick = (movie) => {\n    if (trailerUrl) {\n      setTrailerUrl(\"\");\n    } else {\n      movieTrailer(movie?.name || \"\")\n        .then((url) => {\n          const urlParam = new URLSearchParams(new URL(url).search);\n          setTrailerUrl(urlParam.get(\"v\"));\n        })\n        .catch((err) => console.log(err));\n    }\n    console.log(trailerUrl);\n  };\n\n  return (\n    <div className=\"row\">\n      <h2>{title}</h2>\n\n      <div className=\"row-container\">\n        {movies.map((movie) => (\n          <img\n            key={movie.id}\n            onClick={() => handleClick(movie)}\n            className={`row_poster ${isLarge && \"row_posterLarge\"}`}\n            src={`${base_url}${\n              isLarge ? movie.poster_path : movie.backdrop_path\n            }`}\n            alt={movie.name}\n          />\n        ))}\n      </div>\n      {trailerUrl && <Youtube videoId={trailerUrl} opts={opts} />}\n    </div>\n  );\n}\n\nexport default Row;\n","const API_KEY = \"849be77a81b72e8b8443a9585a6637f6\";\n\nconst requests = {\n  fetchTrending: `/trending/all/week?api_key=${API_KEY}&language=en-US`,\n  fetchNetflixOriginals: `/discover/tv?api_key=${API_KEY}&with_networks=213`,\n  fetchTopRated: `/movie/top_rated?api_key=${API_KEY}&language=en-US`,\n  fetchActionMovies: `/discover/movie?api_key=${API_KEY}&with_genres=28`,\n  fetchComedyMovies: `/discover/movie?api_key=${API_KEY}&with_genres=35`,\n  fetchHorrorMovies: `/discover/movie?api_key=${API_KEY}&with_genres=27`,\n  fetchRomanceMovies: `/discover/movie?api_key=${API_KEY}&with_genres=10749`,\n  fetchDocumentaries: `/discover/movie?api_key=${API_KEY}&with_genres=99`,\n};\n\nexport default requests;\n","import React, { useState, useEffect } from \"react\";\nimport instance from \"./axios\";\nimport requests from \"./request\";\nimport \"./Banner.css\";\n\nfunction Banner() {\n  const [movie, setMovie] = useState([]);\n\n  useEffect(() => {\n    async function fetchData() {\n      const request = await instance.get(requests.fetchNetflixOriginals);\n      // console.log(request);\n      setMovie(\n        request.data.results[\n          Math.floor(Math.random() * request.data.results.length - 1)\n        ]\n      );\n      return request;\n    }\n    fetchData();\n  }, []);\n\n  console.log(movie);\n\n  function truncate(str, n) {\n    return str?.length > n ? str.substr(0, n - 1) + \"...\" : str;\n  }\n\n  return (\n    <header\n      className=\"banner\"\n      style={{\n        backgroundImage: `url(\"https://image.tmdb.org/t/p/original/${movie?.backdrop_path}\")`,\n        backgroundPosition: \"center center\",\n      }}\n    >\n      <div className=\"banner_contents\">\n        <h1 className=\"banner_title\">\n          {movie?.title || movie?.name || movie?.original_name}\n        </h1>\n\n        <div className=\"banner_buttons\">\n          <button className=\"banner_button\">Play</button>\n          <button className=\"banner_button\">My List</button>\n        </div>\n        <h1 className=\"banner_description\">{truncate(movie?.overview, 150)}</h1>\n      </div>\n      <div className=\"banner-fadeBottom\" />\n    </header>\n  );\n}\n\nexport default Banner;\n","import React, { useEffect, useState } from \"react\";\nimport \"./Navbar.css\";\n\nfunction Navbar() {\n  const [show, handleShow] = useState(false);\n  useEffect(() => {\n    window.addEventListener(\"scroll\", () => {\n      if (window.scrollY > 100) {\n        handleShow(true);\n      } else {\n        handleShow(false);\n      }\n    });\n    return () => {\n      window.removeEventListener(\"scroll\");\n    };\n  }, []);\n  return (\n    <div className={`nav ${show && \"nav_black\"}`}>\n      <img\n        src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/0/08/Netflix_2015_logo.svg/799px-Netflix_2015_logo.svg.png\"\n        alt=\"Netflix logo\"\n        className=\"nav_logo\"\n      />\n    </div>\n  );\n}\n\nexport default Navbar;\n","import React from \"react\";\nimport \"./App.css\";\nimport Row from \"./Row\";\nimport requests from \"./request\";\nimport Banner from \"./Banner\";\nimport Navbar from \"./Navbar\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Navbar />\n      <Banner />\n      <Row\n        title=\"NETFLIX ORIGINALS\"\n        fetchUrl={requests.fetchNetflixOriginals}\n        isLarge={true}\n      />\n      <Row title=\"Trending Now\" fetchUrl={requests.fetchTrending} />\n      <Row title=\"Top Rated\" fetchUrl={requests.fetchTopRated} />\n      <Row title=\"Action Movies\" fetchUrl={requests.fetchActionMovies} />\n      <Row title=\"Comedy Movies\" fetchUrl={requests.fetchComedyMovies} />\n      <Row title=\"Horror Movies\" fetchUrl={requests.fetchHorrorMovies} />\n      <Row title=\"Romantic Movies\" fetchUrl={requests.fetchRomanceMovies} />\n      <Row title=\"Documentaries\" fetchUrl={requests.fetchDocumentaries} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}